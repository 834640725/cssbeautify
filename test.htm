<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<title>Unit tests for CSS Beautifier</title>
<style>
.name {
    color: red;
}

pre {
    margin-left: 20px;
    padding: 5px;
    display: block;
    width: 500px;
}

.source {
    background-color: #ddd;
}

.ref {
    border: 1px solid blue;
}

.result {
    border: 1px solid red;
}
</style>
<script src="cssbeautify.js" type="text/javascript" charset="utf-8"></script>

<!--
Every test data consists of a pair of styles with matching ids.
The baseline/reference should have -ref suffix.
-->

<style id="simple">
menu { color: blue; }

box { border-radius: 4px; background-color: red }

a { color: green }
b { color: red }
</style>

<style id="simple-ref">
menu {
    color: blue;
}

box {
    border-radius: 4px;
    background-color: red
}

a {
    color: green
}

b {
    color: red
}
</style>

<style id="comment">
/* line comment */
navigation { color: blue }

menu {
    /* line comment inside */
    border: 2px
}

/* block
 comment */
sidebar { color: red }

invisible {
    /* block
     * comment
     * inside */
    color: #eee
}
</style>

<style id="comment-ref">
/* line comment */
navigation {
    color: blue
}

menu {
    /* line comment inside */
    border: 2px
}

/* block
 comment */
sidebar {
    color: red
}

invisible {
    /* block
     * comment
     * inside */
    color: #eee
}
</style>

<!-- wrong indentation should be corrected -->
<style id="indent">
     navigation {
    color: blue
  }
</style>
<style id="indent-ref">
navigation {
    color: blue
}
</style>

<!-- test various whitespaces placement and elimination -->
<style id="spaces">
/* only one blank line between */
menu { color: red }




navi { color: black }

/* automatically insert a blank line */
button { border: 1px } sidebar { color: #ffe }

/* always whitespace before { */
hidden{opacity:0%}

/* no blank lines inside ruleset */
imprint {
  color: blue;


    opacity: 0.5;

   font-size: small
}

/* before colon: no space, after colon: one space only */
footer {
      font-family:     Arial;

  float   :right;
  }
</style>

<style id="spaces-ref">
/* only one blank line between */
menu {
    color: red
}

navi {
    color: black
}

/* automatically insert a blank line */
button {
    border: 1px
}

sidebar {
    color: #ffe
}

/* always whitespace before { */
hidden {
    opacity: 0%
}

/* no blank lines inside ruleset */
imprint {
    color: blue;
    opacity: 0.5;
    font-size: small
}

/* before colon: no space, after colon: one space only */
footer {
    font-family: Arial;
    float: right;
}
</style>

<!-- String inside the property value should be taken into account -->
<style id="string">
nav:after{content:'}'}
nav:before{content:"}"}
</style>

<style id="string-ref">
nav:after {
    content: '}'
}

nav:before {
    content: "}"
}
</style>

</head>
<body>
<script>
var total = 0, failures = 0, data = {},
    list, i, e, id, name, test;

// Convert into a set of test fixture.
list = document.getElementsByTagName('style');
for (i = 0; i < list.length; i += 1) {
    e = list[i];
    id = e.id;
    if (typeof id === 'string' && id.length > 0) {
        if (id.match(/\-ref$/)) {
          id = id.substring(0, id.length - 4);
          data[id] = data[id] || {};
          data[id].ref = e.innerHTML.replace(/^\s+/, '').replace(/\s+$/, '');
        } else {
          data[id] = data[id] || {};
          data[id].source = e.innerHTML;
        }
    }
}

// Go through all the fixture and create the formatted version.
for (name in data) {
    if (data.hasOwnProperty(name)) {
        total += 1;
        test = data[name];
        test.result = cssbeautify(test.source).replace(/^\s+/, '').replace(/\s+$/, '');
        if (test.result !== test.ref) {
            failures += 1;
            document.write('<p class="name">Failed: ' + name + '</p>');
            document.write('<p>Raw CSS:</p>');
            document.write('<pre class="source">' + test.source + '</pre>');
            document.write('<p>Expected baseline:</p>');
            document.write('<pre class="ref">' + test.ref + '</pre>');
            document.write('<p>Actual:</p>');
            document.write('<pre class="result">' + test.result + '</pre>');
        }
    }
}

document.write('<p>' + total + ' tests, ' + failures + ' failure(s).</p>');
</script>
</body>
</html>
